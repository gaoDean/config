#!/bin/sh

# Use neovim for vim if present.
[ -x "$(command -v nvim)" ] && alias vim="nvim" vimdiff="nvim -d"

# Use $XINITRC variable if file exists.
[ -f "$XINITRC" ] && alias startx="startx $XINITRC"



# Verbosity and settings that you pretty much just always are going to want.
alias \
	cp='cp -iv' \
	mv='mv -iv' \
	q='qlmanage -p' \
	rm='rm -vI' \
	bc='bc -ql' \
	mkd='mkdir -pv' \
	ffmpeg='ffmpeg -hide_banner' \
	sed='sed -E' \
	du='du -sh' \
	less='less --use-color' \
	sc='sc-im' \
	date='gdate' \
	abook='abook --config $HOME/.config/abook/abookrc --datafile $HOME/.config/abook/addressbook' \

# Colorize commands when possible.
alias \
	ls='ls -hG --color=auto -F' \
	grep='grep --color=auto' \
	tree='tree -C' \
	# diff='diff --color=auto' \
	ccat='highlight --out-format=ansi' \
	ip='ip -color=auto' \

# These common commands are just too long! Abbreviate them.
alias \
	so='du * .* | sort -h' \
	ka='killall' \
  icat='kitty +kitten icat' \
	lsa='ls -A' \
	gr='cd $(git rev-parse --show-toplevel)' \
	gc='git commit -q -m' \
	gC='git checkout' \
	ga='git add . && git status -s' \
	gs='git select' \
	gb='git branch' \
	gA='git add -A && git status -s' \
	gp='git push -q' \
	gl='git log --graph --color --decorate --oneline' \
	gla='git log origin/master..HEAD --oneline' \
	gd='git delete' \
	gst='git status -s' \
	gra='git remote add' \
	cdd='cd ..' \
	trem='transmission-remote' \
	sp='pmset sleepnow' \
	rsn='sudo shutdown -r now' \
	e='$EDITOR --' \
	bb='brew leaves | xargs -n1 brew desc' \
	ba='brew update && brew upgrade && brew autoremove && brew cleanup' \
	bk='brew search --casks --desc '' | fzf' \
	xi='sudo xbps-install' \
	xr='sudo xbps-remove -R' \
	xq='xbps-query' \
	za='zathura' \
	ms='mw -Y' \
	mc='macchina' \
	m='e ~/.reminders' \
	pip='pip3' \
	python='python3' \
	hc='heif-convert' \
	exc='elixir' \
	ult='ultra' \
	kh='khal' \
	nh='nohup' \
	nq='networkquality' \
	tectonic='tectonic -X' \

alias \
	tt='tt -theme ~/repos/oth/tt/themes/catppuccin -bold -t 30 -words 200en' \
	tte='tt -theme ~/repos/oth/tt/themes/catppuccin -bold -t 30 -words 1000en' \
	tq='tt -quotes en' \
	tl='ls $HOME/.local/share/Trash/files' \
	te='rm -rf $HOME/.local/share/Trash/files/* $HOME/.local/share/Trash/info/* ; rm -rf $HOME/.local/share/Trash/files/.* $HOME/.local/share/Trash/info/.*' \

alias \
	lf='lfub' \
	magit='nvim -c MagitOnly' \
	ref='shortcuts >/dev/null; source ${XDG_CONFIG_HOME:-$HOME/.config}/shell/shortcutrc ; source ${XDG_CONFIG_HOME:-$HOME/.config}/shell/zshnameddirrc' \
	weath='less -S ${XDG_DATA_HOME:-$HOME/.local/share}/weatherreport' \

se() { cd ~/.local/bin; $EDITOR $(fzf) ;}
fef () { for file in $(fd); do $1 $file $2; done }
timezsh() { for i in $(seq 1 10); do time zsh -i -c exit; done }
n ()
{
	if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
		echo "nnn is already running"
		return
	fi
	export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
	nnn -c -A "$@"
	if [ -f "$NNN_TMPFILE" ]; then
		. "$NNN_TMPFILE"
		rm -f "$NNN_TMPFILE" > /dev/null
	fi
}
nn ()
{
	if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
		echo "nnn is already running"
		return
	fi
	export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
	nnn -n -c -A "$@"
	if [ -f "$NNN_TMPFILE" ]; then
		. "$NNN_TMPFILE"
		rm -f "$NNN_TMPFILE" > /dev/null
	fi
}
gL () { git log $1..HEAD --oneline }
hide() { tar -zcf output.tar.gz $1; mv output.tar.gz $2 }
show() { tar -zxf $1 }
ymd() { vim ~/repos/per/personal/dia/di/$(date +%F).md }
t() { echo -e "$1\n$(cat ~/Documents/todo)" > ~/Documents/todo }
fz() {
	full=$(fzf)
	if [[ ! -z "$full" ]]; then
		cd $(dirname "$full")
		nvim $(basename "$full")
	fi
}
f() {
	full=$(fzf)
	if [[ ! -z "$full" ]]; then
		nvim "$full"
	fi
}
bi() {
	full=$(brew formulae | fzf)
	if [[ ! -z "$full" ]]; then
		echo "brew install ${full}" | pbcopy
		brew info "$full"
	fi
}
cfr() {
	cd ~/.config/raycastscripts
	f
}
pas() { # pa show
	full=$(pa list | fzf)
	if [[ ! -z "$full" ]]; then
		echo $(echo "$full" | cut -d: -f 2)
		pa show "$full" | pbcopy
		(pbclear 30 &) &> /dev/null
	fi
}
pae() { # pa edit
	full=$(pa list | fzf)
	if [[ ! -z "$full" ]]; then
		pa edit "$full"
	fi
}
par() { # pa rename
	full=$(pa list | fzf)
	if [[ ! -z "$full" ]]; then
		echo "Changing ${full}"
		pa show "$full" | pbcopy
		(pbclear 30 &) &> /dev/null
		read new_name
		mv ~/.local/share/pa/passwords/"$full".age ~/.local/share/pa/passwords/"$new_name".age &> /dev/null
	fi
}
rep() {
	pth=$(fd . ~/repos -t d --follow --maxdepth 2 | fzf)
	if [ -n "$pth" ]; then
		cd "$pth"
	fi
}
khw() {
	khal "$1" now week
}
