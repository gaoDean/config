#+title: Config
#+property: header-args :tangle config.el
#+auto_tangle: t

* Table of contents :TOC:
- [[#intro][Intro]]
- [[#user][User]]
- [[#system][System]]
- [[#theme][Theme]]
  - [[#unhighlight-whitespace][Unhighlight whitespace]]
- [[#fonts][Fonts]]
- [[#org-mode][Org Mode]]
  - [[#variables][Variables]]
  - [[#header-size][Header size]]
  - [[#org-auto-tangle][org-auto-tangle]]
  - [[#org-autolist][org-autolist]]
  - [[#math-preview][Math preview]]
  - [[#export][Export]]
- [[#beacon][Beacon]]
- [[#avy][Avy]]
- [[#dashboard][Dashboard]]
- [[#spellcheck][Spellcheck]]
- [[#startup-benchmark][Startup benchmark]]
- [[#file-manager][File manager]]
  - [[#dirvish][Dirvish]]
  - [[#keybindings][Keybindings]]
  - [[#making-deleted-files-go-to-trash-can][Making deleted files go to trash can]]
- [[#modeline][Modeline]]
- [[#rainbow-mode][Rainbow mode]]
- [[#patches][Patches]]
- [[#hooks][Hooks]]
- [[#mappings][Mappings]]

* Intro
Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!


Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.

Doom exposes five (optional) variables for controlling fonts in Doom:
- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:

setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
     doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))

If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!


Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

* User
#+begin_src emacs-lisp
(setq user-full-name "Dean Gao"
      user-mail-address "gao.dean@hotmail.com")
#+end_src

* System
#+begin_src emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/usr/texbin"))
(setq exec-path (append exec-path '("/usr/texbin")))

#+end_src

* Theme
Setting the theme to doom-one.

#+begin_src emacs-lisp
(setq doom-theme 'doom-one)
;; (setq doom-theme 'catppuccin)
(setq catppuccin-flavor 'macchiato)

(defun dg/toggle-dark-mode ()
  (interactive)
  (if (equal catppuccin-flavor 'latte)
      (setq catppuccin-flavor 'macchiato)
    (setq catppuccin-flavor 'latte))
  (catppuccin-reload))

(map! :leader
      :desc "Toggle dark mode" "t d" #'dg/toggle-dark-mode)
#+end_src

** Unhighlight whitespace
#+begin_src emacs-lisp
(setq whitespace-mode nil)
#+end_src

* Fonts
Settings related to fonts within Doom Emacs:
+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance like 'setq' in elisp.

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Input" :size 18)
      doom-variable-pitch-font (font-spec :family "Open Sans" :size 18)
      doom-big-font (font-spec :family "Input" :size 26))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

#+end_src

* Org Mode
** Variables
I'm using FiraCode for the superstar header bullet because the bullet isn't as big in FiraCode and looks better
#+begin_src emacs-lisp
(after! org
  (setq org-directory "~/des/"
        org-ellipsis " â–¼ "
        org-pretty-entities t
        org-startup-with-inline-images t
        org-image-actual-width '(300)
        org-log-done 'time
        org-hide-emphasis-markers t
        org-table-convert-region-max-lines 20000))

(custom-set-faces!
  `(org-superstar-header-bullet :font "FiraCode NF" :height 1.1 :weight light))
#+end_src

** Header size
#+begin_src emacs-lisp
(defun dg/set-org-header-size ()
  (interactive)
  (with-eval-after-load 'org-faces (dolist
      (face
       '((org-level-1 1.4 "#51afef" ultra-bold)
         (org-level-2 1.3 "#c678dd" extra-bold)
         (org-level-3 1.2 "#98be65" bold)
         (org-level-4 1.1 "#da8548" semi-bold)
         (org-level-5 1.0 "#5699af" normal)
         (org-level-6 1.0 "#a9a1e1" normal)
         (org-level-7 1.0 "#46d9ff" normal)
         (org-level-8 1.0 "#ff6c6b" normal)))
    (set-face-attribute (nth 0 face) nil :font "Source Sans Pro" :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face))))
  (with-eval-after-load 'org-tables (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf")))

(dg/set-org-header-size)
#+end_src
** org-auto-tangle
=org-auto-tangle= allows you to add the option =#+auto_tangle: t= in your Org file so that it automatically tangles when you save the document.  I have made adding this to your file even easier by creating a function 'dt/insert-auto-tangle-tag' and setting it to a keybinding 'SPC i a'.

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default nil))

(defun dg/insert-auto-tangle-tag ()
  "Insert auto-tangle tag in a literate config."
  (interactive)
  (evil-org-open-below 1)
  (insert "#+auto_tangle: t ")
  (evil-force-normal-state))

(map! :leader
      :desc "Insert auto_tangle tag" "i a" #'dg/insert-auto-tangle-tag)
#+end_src

#+RESULTS:
: dg/insert-auto-tangle-tag

** org-autolist
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-autolist-mode)
#+end_src

** Math preview
#+begin_src emacs-lisp
;; (setq math-preview-command "/Users/deangao/.local/share/npm/bin/math-preview")

;; (defalias #'org-latex-preview #'math-preview-at-point)
;; (defalias #'org-clear-latex-preview #'math-preview-clear-region)

(setq org-startup-with-latex-preview t)
(setq org-latex-create-formula-image-program 'dvisvgm)
(after! org (plist-put org-format-latex-options :scale 2.2))
#+end_src

** Export
#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
(add-to-list 'org-latex-classes
             '("org-plain-latex"
               "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

* Beacon
Never lose your cursor.  When you scroll, your cursor will shine!  This is a global minor-mode. Turn it on everywhere with:

#+begin_src emacs-lisp
(beacon-mode 1)
#+end_src

* Avy
#+begin_src emacs-lisp
(setq avy-timeout-seconds 0.2)
#+end_src

* Dashboard
#+begin_src emacs-lisp
;; (setq fancy-splash-image "~/.config/doom/black-hole.png")
#+end_src

* Spellcheck
#+begin_src emacs-lisp
(after! spell-fu
  (setq spell-fu-idle-delay 0.5))  ; default is 0.25
#+end_src

* Startup benchmark
#+begin_src emacs-lisp
(add-hook 'after-init-hook 'benchmark-init/deactivate)
#+end_src

* File manager
** Dirvish
#+begin_src emacs-lisp
(dirvish-override-dired-mode)
#+end_src

** Keybindings

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dirvish")
       :desc "Open dirvish" "d" #'dired
       :desc "Dirvish jump to current" "j" #'dired-jump))


(use-package dirvish
    :init
    (dirvish-override-dired-mode)
    :custom
    (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
     '(("h" "~/"                          "Home")
       ("d" "~/Downloads/"                "Downloads")
       ("t" "~/.Trash"                    "Trash")))
    :config
    ;; (dirvish-peek-mode) ; Preview files in minibuffer
    ;; (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
    (setq dirvish-mode-line-format
          '(:left (sort symlink) :right (omit yank index)))
    (setq dirvish-attributes
          '(all-the-icons file-time file-size collapse subtree-state vc-state git-msg))
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches
          "-l --almost-all --human-readable --group-directories-first --no-group"))
    ;; :bind ; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
    ;; (("C-c f" . dirvish-fd)
    ;;  :map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
    ;;  ("a"   . dirvish-quick-access)
    ;;  ("f"   . dirvish-file-info-menu)
    ;;  ("y"   . dirvish-yank-menu)
    ;;  ("N"   . dirvish-narrow)
    ;;  ("^"   . dirvish-history-last)
    ;;  ("h"   . dirvish-up-directory)
    ;;  ("l"   . dirvish-open-file)
    ;;  ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
    ;;  ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
    ;;  ("TAB" . dirvish-subtree-toggle)
    ;;  ("M-f" . dirvish-history-go-forward)
    ;;  ("M-b" . dirvish-history-go-backward)
    ;;  ("M-l" . dirvish-ls-switches-menu)
    ;;  ("M-m" . dirvish-mark-menu)
    ;;  ("M-t" . dirvish-layout-toggle)
    ;;  ("M-s" . dirvish-setup-menu)
    ;;  ("M-e" . dirvish-emerge-menu)
    ;;  ("M-j" . dirvish-fd-jump)))

(evil-define-key 'normal dired-mode-map
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dirvish-narrow
  (kbd "<tab>") 'dirvish-toggle-subtree
  (kbd "M") 'dirvish-mark-menu
  (kbd "R") 'dirvish-renaming-menu
  (kbd "a") 'dirvish-quick-access
  (kbd "c") 'dirvish-chxxx-menu
  (kbd "d") 'dired-do-delete
  (kbd "f") 'dirvish-file-info-menu
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file
  (kbd "m") 'dired-mark
  (kbd "p") 'dirvish-yank
  (kbd "r") 'dired-do-rename
  (kbd "t") 'dired-do-touch
  (kbd "u") 'dired-unmark
  (kbd "v") 'dirvish-move
  (kbd "y") 'dirvish-yank-menu
  (kbd "z") 'dired-do-compress)
#+end_src

** Making deleted files go to trash can
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t
      trash-directory "~/.Trash")
#+end_src

* Modeline
The modeline is the bottom status bar that appears in Emacs windows.  For more information on what is available to configure in the Doom modeline, check out:
https://github.com/seagle0128/doom-modeline

#+begin_src emacs-lisp
(set-face-attribute 'mode-line nil :font "Input-16")
(setq doom-modeline-height 30     ;; sets modeline height
      doom-modeline-persp-name t  ;; adds perspective name to modeline
      doom-modeline-persp-icon t  ;; adds folder icon next to persp name
      doom-modeline-enable-word-count t
      doom-modeline-battery t
      doom-modeline-percent-position nil)
#+end_src

* Rainbow mode
Rainbox mode displays the actual color for any hex value color.

#+begin_src emacs-lisp
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda ()
    (when (not (memq major-mode
                (list 'org-agenda-mode)))
     (rainbow-mode 1))))
(after! rainbow-mode (global-rainbow-mode 1))
#+end_src

* Patches
#+begin_src emacs-lisp
;; (defun stop-using-minibuffer ()
;;     "kill the minibuffer"
;;     (when (and (>= (recursion-depth) 1) (active-minibuffer-window))
;;       (abort-recursive-edit)))

;; (add-hook 'mouse-leave-buffer-hook 'stop-using-minibuffer)
#+end_src

* Hooks
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'mixed-pitch-mode)
(add-hook 'org-mode-hook 'visual-line-mode)
(add-hook 'org-mode-hook 'org-fragtog-mode)
;; (add-hook 'org-mode-hook '+zen/toggle)
#+end_src

* Mappings
#+begin_src emacs-lisp
(map! :leader :desc "Open small vterm window" "o v" #'vterm)
(map! :leader :desc "Avy jump" "j" #'avy-goto-char-timer)
(evil-define-key 'normal org-mode-map
  (kbd "s-<return>") '+org/insert-item-below
  (kbd "g j") 'evil-next-visual-line
  (kbd "g k") 'evil-previous-visual-line)

#+end_src
