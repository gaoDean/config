#+title: Config
#+property: header-args :tangle config.el
#+auto_tangle: t
#+startup: overview

* Intro
Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!


Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.

Doom exposes five (optional) variables for controlling fonts in Doom:
- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:

setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
     doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))

If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!


Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

* User
#+begin_src elisp
(setq user-full-name "Dean Gao"
      user-mail-address "gao.dean@hotmail.com")
#+end_src

* Startup benchmark
#+begin_src elisp
;; (require 'benchmark-init)
;; (add-hook 'doom-first-input-hook #'benchmark-init/deactivate)
#+end_src

* System
#+begin_src elisp
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/texlive/2023/bin/universal-darwin"))
(setq exec-path (append exec-path '("/usr/local/texlive/2023/bin/universal-darwin")))
#+end_src

* Appearance
** Theme
#+begin_src elisp
(setq doom-theme 'doom-moonlight)
;; (setq doom-theme 'gruber-darker)

;; (custom-set-faces!
;;   `(default :background "#282c34"))
#+end_src

** No Titlebar
#+begin_src elisp
(add-to-list 'default-frame-alist '(undecorated . t))
#+end_src
** Transparent background
This is to make it blurry and transparent
#+begin_src elisp
;; (set-face-background 'default "mac:windowBackgroundColor")
;; (set-face-stipple 'default "alpha:80%")
#+end_src
** Scrolling
#+begin_src elisp
(pixel-scroll-precision-mode)
#+end_src
* Fonts
Settings related to fonts within Doom Emacs:
+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance like 'setq' in elisp.

#+begin_src elisp
(setq doom-font (font-spec :family "Input" :size 20)
      doom-variable-pitch-font (font-spec :family "Merriweather" :size 20)
      doom-big-font (font-spec :family "Input" :size 26))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

#+end_src

* Org Mode
** org-auto-tangle
=org-auto-tangle= allows you to add the option =#+auto_tangle: t= in your Org file so that it automatically tangles when you save the document.  I have made adding this to your file even easier by creating a function 'dt/insert-auto-tangle-tag' and setting it to a keybinding 'SPC i a'.

#+begin_src elisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default nil))

(defun dg/insert-auto-tangle-tag ()
  "Insert auto-tangle tag in a literate config."
  (interactive)
  (evil-org-open-below 1)
  (insert "#+auto_tangle: t ")
  (evil-force-normal-state))

(map! :leader
      :desc "Insert auto_tangle tag" "i a" #'dg/insert-auto-tangle-tag)
#+end_src

** org-autolist
Makes list keybindings function more like usual word processors

#+begin_src elisp
(add-hook 'org-mode-hook 'org-autolist-mode)
#+end_src
** org-appear
#+begin_src elisp
(add-hook 'org-mode-hook 'org-appear-mode)
(setq org-appear-autolinks t
      org-appear-autosubmarkers t
      org-appear-autoentities t
      org-appear-autokeywords t
      org-appear-inside-latex t
      org-appear-delay 0.1)
#+end_src

** org-fragtog
Latex preview
#+begin_src elisp
(setq org-startup-with-latex-preview t)
(setq org-latex-create-formula-image-program 'dvisvgm)
(after! org
  (plist-put org-format-latex-options :scale 2.6))
#+end_src

#+RESULTS:
| :foreground | default | :background | default | :scale | 2.6 | :html-foreground | Black | :html-background | Transparent | :html-scale | 1.0 | :matchers | (begin $1 $ $$ \( \[) |

*** Background colour
So the background color isn't darker: https://stackoverflow.com/questions/17239273/org-mode-buffer-latex-syntax-highlighting
#+begin_src elisp
(after! org
  (setq org-highlight-latex-and-related '(latex script entities)))
#+end_src
*** Tables
#+begin_src elisp
(after! org-fragtog (org-fragtog-table-mode))
#+end_src

** ob-mermaid
#+begin_src elisp
(setq ob-mermaid-cli-path "/Users/deangao/.local/share/npm/bin/mmdc")
(org-babel-do-load-languages
 'org-babel-load-languages
 '((mermaid . t)
   (latex . t)
   (emacs-lisp . t)))
(setq org-babel-default-header-args:mermaid
      '((:results . "file")
        (:exports . "results")
        (:puppeteer-config-file . "/Users/deangao/.config/puppeteer/config.json")))
#+end_src
** Variables
I'm using FiraCode for the superstar header bullet because the bullet isn't as big in FiraCode and looks better

#+begin_src elisp
(after! org
  (setq org-directory "~/des/"
        org-ellipsis " ▼ "
        org-pretty-entities t
        org-superstar-item-bullet-alist '((?- . ?➤) (?+ . ?✦)) ; changes +/- symbols in item lists
        org-log-done 'time
        org-hide-emphasis-markers t
        org-table-convert-region-max-lines 20000)
(display-line-numbers-mode nil))

(custom-set-faces!
  `(org-superstar-header-bullet :font "FiraCode NF" :height 1.1 :weight light)
  `(org-ellipsis :height 0.8 :underline nil :foreground "#484848"))
#+end_src

** Header size
#+begin_src elisp
(defun dg/set-org-header-size ()
  (interactive)
  (with-eval-after-load 'org-faces (dolist
      (face
       '((org-level-1 1.4 "#51afef" ultra-bold)
         (org-level-2 1.3 "#c678dd" extra-bold)
         (org-level-3 1.2 "#98be65" bold)
         (org-level-4 1.1 "#da8548" semi-bold)
         (org-level-5 1.0 "#5699af" normal)
         (org-level-6 1.0 "#a9a1e1" normal)
         (org-level-7 1.0 "#46d9ff" normal)
         (org-level-8 1.0 "#ff6c6b" normal)))
    (set-face-attribute (nth 0 face) nil :font "Source Sans Pro" :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face))))
  (with-eval-after-load 'org-tables (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf")))

(dg/set-org-header-size)
#+end_src
** Export
#+begin_src elisp
(after! org
  (setq org-latex-pdf-process (list "latexmk -f -pdfxe -interaction=nonstopmode -output-directory=%o %f")
        org-latex-default-packages-alist
        '(("AUTO" "inputenc" nil
          ("pdflatex"))
         ("T1" "fontenc" nil
          ("pdflatex"))
         ("" "graphicx" t)
         ("" "longtable" t)
         ("" "wrapfig" nil)
         ("" "rotating" nil)
         ("normalem" "ulem" t)
         ("" "amsmath" t)
         ("" "amssymb" t)
         ("" "capt-of" nil)
         ("" "hyperref" t))))

(with-eval-after-load 'ox-latex

  (defun get-string-from-file (filePath)
    "Return file content as string."
    (with-temp-buffer
      (insert-file-contents filePath)
      (buffer-string)))

  (add-to-list 'org-latex-classes
               '("orgox"
                 ;; (get-string-from-file "~/.config/doom/setupfile.sty")
                 "
                \\documentclass[hidelinks]{article}
                [DEFAULT-PACKAGES]
                [PACKAGES]
                [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

* Beacon
Never lose your cursor.  When you scroll, your cursor will shine!  This is a global minor-mode. Turn it on everywhere with:

#+begin_src elisp
(beacon-mode 1)
#+end_src

* Treesitter
#+begin_src elisp
;; (setq treesit-extra-load-path '("~/.local/share/treesitter"))
;; (require 'treesit)
#+end_src

** treesit-auto
#+begin_src elisp
;; (after! treesit-auto
;;   (global-treesit-auto-mode)
;;   (setq treesit-auto-install 'prompt)

;;   (setq svelte-tsauto-config
;;         (make-treesit-auto-recipe
;;          :lang 'svelte
;;          :ts-mode 'svelte-ts-mode
;;          :remap 'svelte-mode
;;          :url "https://github.com/Himujjal/tree-sitter-svelte"
;;          :revision "master"
;;          :source-dir "src"))

;;   (add-to-list 'treesit-auto-recipe-list svelte-tsauto-config))
#+end_src

* Terminal
** eshell-vterm
Runs visual/interactive commands in vterm, not eshell.

Examples of commands include ~yarn create svelte@latest my-app~

#+begin_src elisp
(after! eshell (eshell-vterm-mode)
  (defalias 'eshell/v 'eshell-exec-visual))
#+end_src
* Avy
#+begin_src elisp
(setq avy-timeout-seconds 0.2)
;; (map! :leader :desc "Avy jump" "j" #'avy-goto-char-timer)
(map! :leader :desc "Avy jump" "j" #'avy-goto-char-2)
#+end_src

* Web Mode
#+begin_src elisp
(setq web-mode-script-padding 0)
(setq web-mode-style-padding 0)
#+end_src
* Dashboard
#+begin_src elisp
(setq fancy-splash-image "~/.config/doom/splash/emacs-big-e-padded.svg")
#+end_src

* Spellcheck
#+begin_src elisp
(after! spell-fu
  (setq spell-fu-idle-delay 0.5))  ; default is 0.25
#+end_src

* File manager
** Dirvish
To open Dirvish press: ~SPC o -~ or just ~SPC .~

#+begin_src elisp
(use-package dirvish
    :init
    (dirvish-override-dired-mode)
    :custom
    (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
     '(("h" "~/"                          "Home")
       ("d" "~/Downloads/"                "Downloads")
       ("v" "~/vau/"                      "vau")
       ("r" "~/repos/"                    "repos")
       ("t" "~/.Trash"                    "Trash")))
    :config
    ;; (dirvish-peek-mode) ; Preview files in minibuffer
    ;; (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
    (setq dirvish-mode-line-format
          '(:left (sort symlink) :right (omit yank index)))
    (setq dirvish-attributes
          '(all-the-icons file-time file-size collapse subtree-state vc-state git-msg))
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches
          "-l --almost-all --human-readable --group-directories-first --no-group"))

(evil-define-key 'normal dired-mode-map
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dirvish-narrow
  (kbd "<tab>") 'dirvish-toggle-subtree
  (kbd "M") 'dirvish-mark-menu
  (kbd "S") 'dirvish-symlink
  (kbd "a") 'dirvish-quick-access
  (kbd "c") 'dirvish-chxxx-menu
  (kbd "d") 'dired-do-delete
  (kbd "x") 'dired-do-delete
  (kbd "f") 'dirvish-file-info-menu
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file
  (kbd "m") 'dired-mark
  (kbd "p") 'dirvish-yank
  (kbd "r") 'dired-do-rename
  (kbd "t") 'dirvish-new-empty-file-a
  (kbd "u") 'dired-unmark
  (kbd "v") 'dirvish-move
  (kbd "y") 'dirvish-yank-menu
  (kbd "z") 'dired-do-compress)
#+end_src

** Making deleted files go to trash can
#+begin_src elisp
(setq delete-by-moving-to-trash t
      trash-directory "~/.Trash")
#+end_src

* Visual fill column
#+begin_src elisp
(setq visual-fill-column-width 80
      visual-fill-column-center-text t)
#+end_src
* Emacs Application Framework
#+begin_src elisp
;; (use-package! eaf
;;   :load-path "~/.config/emacs/site-lisp/emacs-application-framework"
;;   :commands (eaf-open)
;;   :custom
;;   (eaf-browser-continue-where-left-off t)
;;   (eaf-browser-enable-adblocker t)
;;   (browse-url-browser-function 'eaf-open-browser) ;; Make EAF Browser my default browser
;;   :config
;;   (require 'eaf-pdf-viewer)
;;   (require 'eaf-all-the-icons)
;;   (require 'eaf-demo)
;;   (require 'eaf-evil)
;;   (setq eaf-pdf-dark-mode nil)

;;   (define-key key-translation-map (kbd "SPC")
;;     (lambda (prompt)
;;       (if (derived-mode-p 'eaf-mode)
;;           (pcase eaf--buffer-app-name
;;             ("browser" (if  (string= (eaf-call-sync "call_function" eaf--buffer-id "is_focus") "True")
;;                            (kbd "SPC")
;;                          (kbd eaf-evil-leader-key)))
;;             ("pdf-viewer" (kbd eaf-evil-leader-key))
;;             ("image-viewer" (kbd eaf-evil-leader-key))
;;             (_  (kbd "SPC")))
;;         (kbd "SPC")))))

;; (use-package! eaf
;;   :load-path "~/.config/emacs/site-lisp/emacs-application-framework/"
;;   :commands (eaf-open)
;;   :custom
;;   (eaf-browser-continue-where-left-off t)
;;   (eaf-browser-enable-adblocker t)
;;   (browse-url-browser-function 'eaf-open-browser) ;; Make EAF Browser my default browser
;;   :config
;;   (require 'eaf-pdf-viewer)
;;   (require 'eaf-all-the-icons)
;;   (setq eaf-pdf-dark-mode nil)
;;     ;; (require 'eaf-evil)
;;     ;; (define-key key-translation-map (kbd "SPC")
;;     ;;   (lambda (prompt)
;;     ;;     (if (derived-mode-p 'eaf-mode)
;;     ;;         (pcase eaf--buffer-app-name
;;     ;;           ("browser" (if  (string= (eaf-call-sync "call_function" eaf--buffer-id "is_focus") "True")
;;     ;;                          (kbd "SPC")
;;     ;;                        (kbd eaf-evil-leader-key)))
;;     ;;           ("pdf-viewer" (kbd eaf-evil-leader-key))
;;     ;;           ("image-viewer" (kbd eaf-evil-leader-key))
;;     ;;           (_  (kbd "SPC")))
;;     ;;       (kbd "SPC")))))
;;   )
#+end_src
* Modeline
The modeline is the bottom status bar that appears in Emacs windows.  For more information on what is available to configure in the Doom modeline, check out:
https://github.com/seagle0128/doom-modeline

#+begin_src elisp
(set-face-attribute 'mode-line nil :font "Input-16")
(setq doom-modeline-height 30     ;; sets modeline height
      doom-modeline-persp-name t  ;; adds perspective name to modeline
      doom-modeline-persp-icon t  ;; adds folder icon next to persp name
      doom-modeline-enable-word-count t
      doom-modeline-battery t
      doom-modeline-percent-position nil)
#+end_src

* Rainbow mode
Rainbow mode displays the actual color for any hex value color.

#+begin_src elisp
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda ()
    (when (not (memq major-mode
                (list 'org-agenda-mode)))
     (rainbow-mode 1))))
(after! rainbow-mode (global-rainbow-mode 1))
#+end_src

* Cool
** Pong
#+begin_src elisp
(evil-define-key 'normal pong-mode-map
  (kbd "n") 'pong-move-down
  (kbd "e") 'pong-move-up
  (kbd "t") 'pong-move-right
  (kbd "r") 'pong-move-left)
#+end_src
** Zone
A text based screensaver
#+begin_src elisp
;; (zone-when-idle 30)
#+end_src
** Typit
#+begin_src elisp
(after! typit (setq typit-test-time 30))
#+end_src
** Helpful
*** Functions
+ ~org-collect-keywords~ queries the headers of an org file
*** Errors
+ ~No catch for tag: emacs-version-changed nil~ : rebuild doom emacs
* Patches
#+begin_src elisp
;; (defun stop-using-minibuffer ()
;;     "kill the minibuffer"
;;     (when (and (>= (recursion-depth) 1) (active-minibuffer-window))
;;       (abort-recursive-edit)))

;; (add-hook 'mouse-leave-buffer-hook 'stop-using-minibuffer)
#+end_src

* Hooks
#+begin_src elisp
(add-hook 'org-mode-hook (lambda()
                           (display-line-numbers-mode -1)
                           (text-scale-increase 1)
                           (mixed-pitch-mode)
                           (visual-line-mode)
                           (org-fragtog-mode)
                           (writeroom-mode)))
#+end_src

* Mappings
#+begin_src elisp
(evil-define-key 'normal org-mode-map
  (kbd "s-<return>") 'org-meta-return
  (kbd "g j") 'evil-next-visual-line
  (kbd "g k") 'evil-previous-visual-line)

(map! :leader
      :desc "Open small vterm window" "o v" #'vterm
      :desc "Grep" "c g" #'deadgrep)

(after! embark
  (defvar-keymap embark-table-actions
    :doc "table.el functions"
    :parent embark-general-map
    "d" #'table-query-dimension
    "w" #'table-widen-cell
    "n" #'table-narrow-cell)
  (add-to-list 'embark-keymap-alist '(org-table . embark-table-actions)))
#+end_src
